// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/multimedia.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MultimediaService_GetPostMultimedia_FullMethodName    = "/MultimediaService.MultimediaService/GetPostMultimedia"
	MultimediaService_GetUserProfileImage_FullMethodName  = "/MultimediaService.MultimediaService/GetUserProfileImage"
	MultimediaService_CreatePost_FullMethodName           = "/MultimediaService.MultimediaService/CreatePost"
	MultimediaService_UploadPostMultimedia_FullMethodName = "/MultimediaService.MultimediaService/UploadPostMultimedia"
)

// MultimediaServiceClient is the client API for MultimediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultimediaServiceClient interface {
	GetPostMultimedia(ctx context.Context, in *PostInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	GetUserProfileImage(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	UploadPostMultimedia(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, PostInfo], error)
}

type multimediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultimediaServiceClient(cc grpc.ClientConnInterface) MultimediaServiceClient {
	return &multimediaServiceClient{cc}
}

func (c *multimediaServiceClient) GetPostMultimedia(ctx context.Context, in *PostInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MultimediaService_ServiceDesc.Streams[0], MultimediaService_GetPostMultimedia_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PostInfo, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MultimediaService_GetPostMultimediaClient = grpc.ServerStreamingClient[FileChunk]

func (c *multimediaServiceClient) GetUserProfileImage(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MultimediaService_ServiceDesc.Streams[1], MultimediaService_GetUserProfileImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserInfo, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MultimediaService_GetUserProfileImageClient = grpc.ServerStreamingClient[FileChunk]

func (c *multimediaServiceClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Post)
	err := c.cc.Invoke(ctx, MultimediaService_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimediaServiceClient) UploadPostMultimedia(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, PostInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MultimediaService_ServiceDesc.Streams[2], MultimediaService_UploadPostMultimedia_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, PostInfo]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MultimediaService_UploadPostMultimediaClient = grpc.ClientStreamingClient[FileChunk, PostInfo]

// MultimediaServiceServer is the server API for MultimediaService service.
// All implementations must embed UnimplementedMultimediaServiceServer
// for forward compatibility.
type MultimediaServiceServer interface {
	GetPostMultimedia(*PostInfo, grpc.ServerStreamingServer[FileChunk]) error
	GetUserProfileImage(*UserInfo, grpc.ServerStreamingServer[FileChunk]) error
	CreatePost(context.Context, *Post) (*Post, error)
	UploadPostMultimedia(grpc.ClientStreamingServer[FileChunk, PostInfo]) error
	mustEmbedUnimplementedMultimediaServiceServer()
}

// UnimplementedMultimediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMultimediaServiceServer struct{}

func (UnimplementedMultimediaServiceServer) GetPostMultimedia(*PostInfo, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetPostMultimedia not implemented")
}
func (UnimplementedMultimediaServiceServer) GetUserProfileImage(*UserInfo, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserProfileImage not implemented")
}
func (UnimplementedMultimediaServiceServer) CreatePost(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedMultimediaServiceServer) UploadPostMultimedia(grpc.ClientStreamingServer[FileChunk, PostInfo]) error {
	return status.Errorf(codes.Unimplemented, "method UploadPostMultimedia not implemented")
}
func (UnimplementedMultimediaServiceServer) mustEmbedUnimplementedMultimediaServiceServer() {}
func (UnimplementedMultimediaServiceServer) testEmbeddedByValue()                           {}

// UnsafeMultimediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultimediaServiceServer will
// result in compilation errors.
type UnsafeMultimediaServiceServer interface {
	mustEmbedUnimplementedMultimediaServiceServer()
}

func RegisterMultimediaServiceServer(s grpc.ServiceRegistrar, srv MultimediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMultimediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MultimediaService_ServiceDesc, srv)
}

func _MultimediaService_GetPostMultimedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PostInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultimediaServiceServer).GetPostMultimedia(m, &grpc.GenericServerStream[PostInfo, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MultimediaService_GetPostMultimediaServer = grpc.ServerStreamingServer[FileChunk]

func _MultimediaService_GetUserProfileImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultimediaServiceServer).GetUserProfileImage(m, &grpc.GenericServerStream[UserInfo, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MultimediaService_GetUserProfileImageServer = grpc.ServerStreamingServer[FileChunk]

func _MultimediaService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimediaServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimediaService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimediaServiceServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimediaService_UploadPostMultimedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultimediaServiceServer).UploadPostMultimedia(&grpc.GenericServerStream[FileChunk, PostInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MultimediaService_UploadPostMultimediaServer = grpc.ClientStreamingServer[FileChunk, PostInfo]

// MultimediaService_ServiceDesc is the grpc.ServiceDesc for MultimediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultimediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MultimediaService.MultimediaService",
	HandlerType: (*MultimediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _MultimediaService_CreatePost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPostMultimedia",
			Handler:       _MultimediaService_GetPostMultimedia_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserProfileImage",
			Handler:       _MultimediaService_GetUserProfileImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadPostMultimedia",
			Handler:       _MultimediaService_UploadPostMultimedia_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/multimedia.proto",
}
